<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>MvvmLib.Wpf - MvvmLib Documentation</title>
    <link rel="shortcut icon" href="favicon.ico">
    <link rel="stylesheet" href="css/theme.css" type="text/css" />
    <link rel="stylesheet" href="css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="css/styles/vs.css">
    <link rel="stylesheet" href="css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="index.htm"><i class="fa fa-home"></i> MvvmLib Documentation</a>
                <div role="search">
                    <form id="search-form" class="form" action="Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="index.htm">Home</a>
</li>

<li class="tocentry"><a href="MvvmLib.Core.htm">MvvmLib.Core</a>
</li>
<li class="tocentry current"><a class="current" href="MvvmLib.Wpf.htm">MvvmLib.Wpf</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#viewmodellocator">ViewModelLocator</a></li>

<li class="tocentry"><a href="#navigation">Navigation</a></li>

<li class="tocentry"><a href="#bootstrapper">Bootstrapper</a></li>

<li class="tocentry"><a href="#containerlocator">ContainerLocator</a></li>

<li class="tocentry"><a href="#change-the-mvvm-interfaces-used-by-the-navigation-service">Change the Mvvm interfaces used by the Navigation Service</a></li>

<li class="tocentry"><a href="#create-a-custom-navigation-service">Create a custom Navigation Service</a></li>

<li class="tocentry"><a href="#multiple-navigation-services">Multiple Navigation Services</a></li>

<li class="tocentry"><a href="#showing-multiple-shells">Showing multiple shells</a></li>

<li class="tocentry"><a href="#data">Data</a></li>

<li class="tocentry"><a href="#controls">Controls</a></li>

<li class="tocentry"><a href="#interactivity">Interactivity</a></li>

<li class="tocentry"><a href="#bindingproxy">BindingProxy</a></li>



</ul>
<li class="tocentry"><a href="MvvmLib.IoC.htm">MvvmLib.IoC</a>
</li>
<li class="tocentry"><a href="MvvmLib.Scanning.htm">MvvmLib.Scanning</a>
</li>
<li class="tocentry"><a href="LICENSE.htm">LICENSE</a>
</li>
</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="index.htm">MvvmLib Documentation</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="index.htm">Home</a></li> / <li><a href="MvvmLib.Wpf.htm">MvvmLib.Wpf</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="mvvmlib.wpf">MvvmLib.Wpf<a class="headerlink" href="#mvvmlib.wpf" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<ul>
<li>Mvvm: <strong>ViewModelLocator</strong>, <strong>BindingProxy</strong>, etc.</li>
<li>Navigation: <strong>NavigationService</strong>, <strong>ConfigurableNavigationService</strong></li>
<li>Data: <strong>ListCollectionViewEx</strong>, <strong>PagedList</strong>, <strong>PagedSource</strong> and commands <strong>ListCollectionViewCommands</strong>, <strong>PagedSourceCommands</strong></li>
<li>Interactivity: <strong>CallMethodAction</strong>, <strong>SelectorSelectedItemsSyncBehavior</strong>, <strong>EventToCommandBehavior</strong>, etc.</li>
<li>Controls: <strong>AnimatingContentControl</strong>, <strong>TransitioningContentControl</strong>, <strong>TransitioningItemsControl</strong>: allow to animate content. <strong>NavigatableContentControl</strong></li>
<li>Expressions: allows to create filters with Linq expressions.</li>
<li>Common: <strong>MvvmUtils</strong></li>
</ul>
<h2 id="viewmodellocator">ViewModelLocator<a class="headerlink" href="#viewmodellocator" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>Allows to resolve ViewModels for Views with <strong>AutoWireViewModel</strong>.</p>
</blockquote>
<p>Default <strong>convention</strong>:</p>
<ul>
<li>Views in <code>Views</code> namespace</li>
<li>View models in <code>ViewModels</code> namespace</li>
<li>
View model name:
<ul>
<li><em>view name + &quot;ViewModel&quot;</em> (example: ShellViewModel for Shell)</li>
<li>Or if the view name ends by &quot;View&quot;: <em>view name + &quot;Model&quot;</em> (example: NavigationViewModel for NavigationView)</li>
</ul>
</li>
</ul>
<h3 id="change-the-convention">Change the convention<a class="headerlink" href="#change-the-convention" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Example 1: with &quot;View&quot; and &quot;ViewModel&quot; namespaces</p>
<pre><code class="cs">ViewModelLocationProvider.ChangeConvention((viewType) =&gt;
{
    // &quot;View&quot; and &quot;ViewModel&quot; folders
    var prefix  = viewType.FullName.Replace(&quot;.View.&quot;, &quot;.ViewModel.&quot;);
    var suffix = viewType.Name.EndsWith(&quot;View&quot;) ? &quot;Model&quot; : &quot;ViewModel&quot;;
    var assemblyFullName = viewType.Assembly.FullName;

    var viewModelTypeName = string.Format(CultureInfo.InvariantCulture, &quot;{0}{1}, {2}&quot;, prefix, suffix, assemblyFullName);
    return Type.GetType(viewModelTypeName);
});
</code></pre>

<p>Example 2: with <code>multiple view folders</code></p>
<pre><code class="cs">ViewModelLocationProvider.ChangeConvention(viewType =&gt;
{
    // &quot;Menus&quot; or &quot;Views&quot;
    string prefix = viewType.FullName.Contains(&quot;.Menus.&quot;) ?
    viewType.FullName.Replace(&quot;.Menus.&quot;, &quot;.ViewModels.&quot;)
    : viewType.FullName.Replace(&quot;.Views.&quot;, &quot;.ViewModels.&quot;);

    var suffix = viewType.Name.EndsWith(&quot;View&quot;) ? &quot;Model&quot; : &quot;ViewModel&quot;;
    var assemblyFullName = viewType.Assembly.FullName;

    var viewModelTypeName = string.Format(CultureInfo.InvariantCulture, &quot;{0}{1}, {2}&quot;, prefix, suffix, assemblyFullName);
    return Type.GetType(viewModelTypeName);
});
</code></pre>

<p>Example 3: ViewModels in <code>another assembly</code></p>
<pre><code class="cs">ViewModelLocationProvider.ChangeConvention(viewType =&gt;
{
    // Class Library &quot;Lib&quot;
    var viewModelName = viewType.Name.EndsWith(&quot;View&quot;) ? $&quot;{viewType.Name}Model&quot; : $&quot;{viewType.Name}ViewModel&quot;;
    var viewModelTypeName = string.Format(CultureInfo.InvariantCulture, &quot;Lib.ViewModels.{0}, Lib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;, viewModelName);
    var viewModelType = Type.GetType(viewModelTypeName);

    return viewModelType;
});
</code></pre>

<h3 id="register-a-custom-view-model-for-a-view">Register a custom View Model for a view<a class="headerlink" href="#register-a-custom-view-model-for-a-view" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<pre><code class="cs">ViewModelLocationProvider.Register&lt;Shell, CustomViewModel&gt;();
</code></pre>

<p>Or with a <code>factory</code></p>
<pre><code class="cs">ViewModelLocationProvider.Register&lt;Shell&gt;(() =&gt; new CustomViewModel());
</code></pre>

<h3 id="autowireviewmodel-attached-property-window-usercontrol">AutoWireViewModel Attached property (Window, UserControl)<a class="headerlink" href="#autowireviewmodel-attached-property-window-usercontrol" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Example:</p>
<pre><code class="xml">&lt;Window x:Class=&quot;Sample.Views.Shell&quot;
        ...
         xmlns:ml=&quot;http://mvvmlib.com/&quot;
         ml:ViewModelLocator.AutoWireViewModel=&quot;True&quot;&gt;
</code></pre>

<p>Note: the <strong>attached property can be omitted with a NavigationService</strong> (automatically tries to resolve the ViewModel for a View)</p>
<h2 id="navigation">Navigation<a class="headerlink" href="#navigation" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<h3 id="navigationservice">NavigationService<a class="headerlink" href="#navigationservice" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<blockquote>
<p>Simple, customizable, bindable, injectable with Mvvm support.</p>
</blockquote>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Method</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td>Navigate</td>
	<td>Navigation by Uri or uri string to a registered view (or viewmodel)</td>
</tr>
<tr>
	<td>Replace</td>
	<td>Allows to replace previous navigation entry</td>
</tr>
<tr>
	<td>MoveTo</td>
	<td>Move to index or content</td>
</tr>
<tr>
	<td>MoveToFirst</td>
	<td>Move to first page</td>
</tr>
<tr>
	<td>MoveToLast</td>
	<td>Move to last page</td>
</tr>
<tr>
	<td>MoveToPrevious</td>
	<td>Move to previous page</td>
</tr>
<tr>
	<td>MoveToNext</td>
	<td>Move to next page</td>
</tr>
<tr>
	<td>Clear</td>
	<td>clear history and content</td>
</tr>
<tr>
	<td>Sync</td>
	<td>Allows to sync with another navigation service</td>
</tr>
</tbody>
</table>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Property</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td>CanMoveToPrevious</td>
	<td>Checks if can move to previous entry</td>
</tr>
<tr>
	<td>CanMoveToNext</td>
	<td>Checks if can move to next entry</td>
</tr>
<tr>
	<td>Journal</td>
	<td>The navigation journal</td>
</tr>
</tbody>
</table>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Event</th>
	<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
	<td>CanMoveToPreviousChanged</td>
	<td>Raised when the value changed</td>
</tr>
<tr>
	<td>CanMoveToNextChanged</td>
	<td>Raised when the value changed</td>
</tr>
<tr>
	<td>ContentChanged</td>
	<td>Raised on content changed</td>
</tr>
<tr>
	<td>Navigated</td>
	<td>Raised on navigation end</td>
</tr>
<tr>
	<td>Navigating</td>
	<td>Raised at beginning of navigation</td>
</tr>
<tr>
	<td>NavigationFailed</td>
	<td>Raised on navigation failed (cancelled with activation guard for example)</td>
</tr>
</tbody>
</table>
<p>Note: 1 navigation service per UIElement (or use NavigationBehavior for custom behaviors)</p>
<p>Bindable navigation service. Exemple with ContentControl</p>
<pre><code class="xml"> &lt;ContentControl Content=&quot;{Binding NavigationService.Content}&quot;&gt;&lt;/ContentControl&gt;
</code></pre>

<p>Register the navigation service with a IoC Container and inject in ViewModel</p>
<pre><code class="cs">public class ShellViewModel
{
    public ShellViewModel(INavigationService navigationService)
    {
        NavigationService = navigationService;
        Commands = new NavigationServiceCommands(NavigationService);
        NavigationService.Navigate(&quot;HomeView&quot;);
    }

    public INavigationService NavigationService { get; }
    public NavigationServiceCommands Commands { get; }
}
</code></pre>

<p>Bind commands in view</p>
<pre><code class="xml">&lt;Button Command=&quot;{Binding Commands.MoveToFirstCommand}&quot; Width=&quot;50&quot;&gt;&amp;lt;&amp;lt;&lt;/Button&gt;
&lt;Button Command=&quot;{Binding Commands.MoveToPreviousCommand}&quot; Width=&quot;50&quot;&gt;&amp;lt;/Button&gt;
&lt;Button Command=&quot;{Binding Commands.MoveToNextCommand}&quot; Width=&quot;50&quot;&gt;&amp;gt;&lt;/Button&gt;
&lt;Button Command=&quot;{Binding Commands.MoveToLastCommand}&quot; Width=&quot;50&quot;&gt;&amp;gt;&amp;gt;&lt;/Button&gt;
&lt;Button Command=&quot;{Binding Commands.NavigateCommand}&quot; CommandParameter=&quot;HomeView&quot;&gt;Home&lt;/Button&gt;
&lt;!-- with parameter --&gt;
&lt;Button Command=&quot;{Binding Commands.NavigateCommand}&quot; CommandParameter=&quot;ViewA?id=sample-id&quot;&gt;View A&lt;/Button&gt;&gt;
</code></pre>

<p>In code</p>
<pre><code class="cs">NavigationService.Navigate(&quot;ViewA&quot;);
// With parameters
NavigationService.Navigate(&quot;ViewA&quot;, new NavigateParameters
{
    { &quot;id&quot;, 10 }
});
// note: the query parameters are added to the NavigateParameters
NavigationService.Navigate(&quot;ViewA?tag=sample&quot;, new NavigateParameters
{
    { &quot;id&quot;, 10 }
});
</code></pre>

<p><code>ViewModel-First</code>: It's possible to <code>navigate to ViewModels</code></p>
<pre><code class="cs">NavigationService.Navigate(&quot;ViewAViewModel&quot;);
</code></pre>

<p><em>Define a DataTemplate</em></p>
<pre><code class="xml">&lt;DataTemplate DataType=&quot;{x:Type viewModels:ViewAViewModel}&quot;&gt;
    &lt;views:ViewA /&gt;
&lt;/DataTemplate&gt;
</code></pre>

<p><em>And register for navigation</em></p>
<pre><code class="cs">// Example with IUnityContainer (Unity Bootstrapper)
Container.RegisterForNavigation&lt;ViewAViewModel&gt;();
</code></pre>

<p>Replace: example remove LoginView from navigation journal</p>
<pre><code class="cs">public class LoginViewModel : ISupportNavigation
{
    private readonly IAuth _auth;
    private readonly INavigationService _navigationService;
    private DelegateCommand _loginCommand;
    private string _returnUrl;
    private INavigateParameters _parameters;

    public LoginViewModel(IAuth auth, INavigationService navigationService)
    {
        _auth = auth;
        _navigationService = navigationService;
    }

    public DelegateCommand LoginCommand
    {
        get
        {
            if (_loginCommand == null)
                _loginCommand = new DelegateCommand(Login);
            return _loginCommand;
        }
    }

    public bool IsNavigationTarget(NavigateContext context) =&gt; false;

    public void OnNavigatedFrom(NavigateContext context) { }

    public void OnNavigatedTo(NavigateContext context)
    {
        _returnUrl = context.Parameters.GetValue&lt;string&gt;(&quot;returnUrl&quot;);
        _parameters = context.GetOriginalParameters();
    }

    private void Login()
    {
        _auth.Login();
        _navigationService.Replace(_returnUrl, _parameters);
    }
}
</code></pre>

<p>Example: try to navigate to a protected resource and redirect to LoginView</p>
<pre><code class="cs">public class ProtectedViewModel : BindableBase, ISupportNavigation, ISupportActivationGuard
{
    private readonly IAuth _auth;

    public ProtectedViewModel(IAuth auth)
    {
        _auth = auth;
    }

    public bool IsNavigationTarget(NavigateContext context) =&gt; false;

    public void OnNavigatedFrom(NavigateContext context)
    { }

    public void OnNavigatedTo(NavigateContext context)
    {
        var id = context.Parameters.GetValue&lt;string&gt;(&quot;id&quot;);
        // etc.
    }

    public void CanActivate(NavigateContext context, Action&lt;bool&gt; continuationCallback)
    {
        if (!_auth.IsLogged)
        {
            context.NavigationService.Navigate(&quot;LoginView?returnUrl=ProtectedView&quot;, context.Parameters);
            continuationCallback(false);
        }
        else
            continuationCallback(true);
    }
}
</code></pre>

<h3 id="registering-views-and-view-models-for-navigation">Registering views (and view models) for navigation<a class="headerlink" href="#registering-views-and-view-models-for-navigation" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p><code>ConfigurableNavigationService</code> is easy to configure (does not require to use a bootstrapper)</p>
<pre><code class="cs">var navigationService = new ConfigurableNavigationService
{
    // Name (&quot;PageKey&quot;, used in Uri or UriString) =&gt; Type
    PageAssociations = new Dictionary&lt;string, Type&gt;
    {
        { &quot;HomeView&quot;, typeof(HomeView) },
        { &quot;ViewA&quot;, typeof(ViewA) },
        // With ViewModel for example
        { &quot;ViewBViewModel&quot;, typeof(ViewBViewModel) },
        // etc.
    }
};
</code></pre>

<p>Or use Scrutor to find and register all views of a namespace</p>
<pre><code class="cs">var navigationService = new ConfigurableNavigationService();
navigationService.RegisterViewsInExactNamespaceOf&lt;Shell&gt;(); // or RegisterViewsInNamespaceOf
</code></pre>

<p><code>NavigationService</code>: it's better to use a Bootstrapper (to register views for navigation) ...</p>
<h2 id="bootstrapper">Bootstrapper<a class="headerlink" href="#bootstrapper" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Examples</p>
<p>With <code>MvvmLib.Unity.Wpf</code></p>
<pre><code class="cs">public class Bootstrapper : UnityBootstrapperBase
{
    protected override void RegisterTypes()
    {
        // Services
        Container.RegisterSingleton&lt;INavigationService, NavigationService&gt;();
        Container.RegisterSingleton&lt;IAuth, FakeAuth&gt;();

        // ViewModels
        Container.RegisterForNavigation&lt;ViewBViewModel&gt;();
        Container.RegisterViewModelsInExactNamespaceOf&lt;ShellViewModel&gt;();

        // Register For Navigation
        Container.RegisterForNavigationInNamespaceOf&lt;Shell&gt;(); // here
    }

    protected override Window CreateShell() =&gt; Container.Resolve&lt;Shell&gt;();
}
</code></pre>

<p>With <code>MvvmLib.Microsoft.DependencyInjection.Extensions.Wpf</code></p>
<pre><code class="cs">public class Bootstrapper : MicrosoftDependencyInjectionBootstrapperBase
{
    protected override void RegisterTypes()
    {
        // Services
        Services.AddSingleton&lt;INavigationService, NavigationService&gt;();
        Services.AddSingleton&lt;IAuth, FakeAuth&gt;();
        // ViewModels
        Services.RegisterForNavigation&lt;ViewBViewModel&gt;();
        Services.RegisterViewModelsInExactNamespaceOf&lt;ShellViewModel&gt;();

        // Register For Navigation
        Services.RegisterForNavigationInNamespaceOf&lt;Shell&gt;(); // here
    }

    protected override Window CreateShell() =&gt; ContainerLocator.Current.Resolve&lt;Shell&gt;();
}
</code></pre>

<p>With <code>MvvmLib.IoC.Extensions.Wpf</code>: all can be auto resolved</p>
<pre><code class="cs">public class Bootstrapper : InjectorBootstrapperBase
{
    protected override void RegisterTypes()
    {
    }

    protected override Window CreateShell() =&gt; ContainerLocator.Current.Resolve&lt;Shell&gt;();
}
</code></pre>

<p>App.xaml: Replace StartupUri by Startup event</p>
<pre><code class="xml">&lt;Application x:Class=&quot;WpfApp1.App&quot;
             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;
             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;
             xmlns:local=&quot;clr-namespace:WpfApp1&quot;
             Startup=&quot;Application_Startup&quot;&gt;
    &lt;Application.Resources&gt;

    &lt;/Application.Resources&gt;
&lt;/Application&gt;
</code></pre>

<p>In code behind</p>
<pre><code class="cs">public partial class App : Application
{
    private void Application_Startup(object sender, StartupEventArgs e)
    {
        new Bootstrapper().Run();
    }
}
</code></pre>

<h3 id="create-a-login-screen-or-a-splashscreen">Create a Login Screen or a SplashScreen<a class="headerlink" href="#create-a-login-screen-or-a-splashscreen" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<pre><code class="cs">public class Bootstrapper : UnityBootstrapperBase
{
    // etc.

    protected override Window CreateShell() =&gt; Container.Resolve&lt;Shell&gt;();

    protected override void ShowShell()
    {
        var window = new LoginOrSplashWindow();
        if (window.ShowDialog() == true)
            base.ShowShell();
        else
            Application.Current.Shutdown();
    }
}
</code></pre>

<p>Note: With a SplashScreenManager, <code>BeforeCreatingShell</code> method can be used.</p>
<h2 id="containerlocator">ContainerLocator<a class="headerlink" href="#containerlocator" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Is used by MvvmLib to resolve all dependencies and is configured by the bootstrapper in background.</p>
<p>Manually (without Bootstrapper), example with Unity:</p>
<pre><code class="cs">// Container is IUnityContainer
ContainerLocator.SetContainerLocationProvider(() =&gt; new UnityContainerLocationProvider(Container))
</code></pre>

<p>Resolve a dependency</p>
<pre><code class="cs">var shell = ContainerLocator.Current.Resolve&lt;Shell&gt;();
</code></pre>

<h3 id="mvvm-support">Mvvm Support<a class="headerlink" href="#mvvm-support" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Navigation</p>
<ul>
<li>ISupportNavigation: IsNavigationTarget to manage the view resolved, OnNavigatedFrom and OnNavigatedTo methods</li>
<li>ISupportJournal: to not persist a view in journal</li>
<li>ISupportLoaded with ViewModel.EnableLoaded attached property on a View</li>
<li>ISupportActivation: notified when a view is active/ selected</li>
</ul>
<p>Guards:</p>
<ul>
<li>ISupportActivationGuard</li>
<li>ISupportDeactivationGuard</li>
</ul>
<p>Example confirm navigation</p>
<pre><code class="cs">public class ViewAViewModel : BindableBase, ISupportNavigation, ISupportActivationGuard, ISupportDeactivationGuard
{
    // etc.

    public void CanActivate(NavigateContext context, Action&lt;bool&gt; continuationCallback)
    {
        var can = MessageBox.Show($&quot;Activate {nameof(ViewAViewModel)}?&quot;, &quot;Confirmation&quot;, MessageBoxButton.OKCancel) == MessageBoxResult.OK;
        continuationCallback(can);
    }

    public void CanDeactivate(NavigateContext context, Action&lt;bool&gt; continuationCallback)
    {
        var can = MessageBox.Show($&quot;Deactivate {nameof(ViewAViewModel)}?&quot;, &quot;Confirmation&quot;, MessageBoxButton.OKCancel) == MessageBoxResult.OK;
        continuationCallback(can);
    }

    // returns always the same View/ViewModel if the pageKey of the uri is View
    public bool IsNavigationTarget(NavigateContext context) =&gt; context.PageKey == &quot;ViewA&quot;;

    public void OnNavigatedFrom(NavigateContext context)  { }

    public void OnNavigatedTo(NavigateContext context)
    {
        var id = context.Parameters.GetValue&lt;string&gt;(&quot;id&quot;);
    }
}
</code></pre>

<p><code>IsNavigationTarget</code>: Master Details Scenario Sample</p>
<pre><code class="cs">public class UserDetailsViewModel : BindableBase, ISupportNavigation
{
    private User _user;
    public User User
    {
        get { return _user; }
        set { SetProperty(ref _user, value); }
    }

    public bool IsNavigationTarget(NavigateContext context)
    {
        if (context.Parameters.TryGetValue&lt;int&gt;(&quot;id&quot;, out var id))
            return id == User.Id;
        return false;
    }

    // etc.
}
</code></pre>

<h3 id="handle-loaded-from-viewmodel">Handle Loaded from ViewModel<a class="headerlink" href="#handle-loaded-from-viewmodel" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Add the <code>EnabledLoaded</code> attached property on the View</p>
<pre><code class="xml">&lt;Window
        ...
        xmlns:ml=&quot;http://mvvmlib.com/&quot;
        ml:ViewModel.EnableLoaded=&quot;True&quot; /&gt;
</code></pre>

<p>Implement <code>ISupportLoaded</code></p>
<pre><code class="cs">public class ShellViewModel : ISupportLoaded
{
    public void OnLoaded()
    {
        // do something
    }
}
</code></pre>

<h2 id="change-the-mvvm-interfaces-used-by-the-navigation-service">Change the Mvvm interfaces used by the Navigation Service<a class="headerlink" href="#change-the-mvvm-interfaces-used-by-the-navigation-service" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Example: replace to use Prism interfaces</p>
<pre><code class="cs">public class PrismNavigationService : NavigationService
{
    #region Mvvm

    protected override NavigateContext CreateContext(Uri uri, INavigateParameters parameters, NavigateMode mode)
    {
        var context = new PrismNavigateContext(uri, parameters, mode)
        {
            NavigationService = this
        };
        return context;
    }

    protected override void TryAutoWireViewModel(object content)
    {
        if (content is FrameworkElement view &amp;&amp; view.DataContext is null &amp;&amp; PrismViewModelLocator.GetAutoWireViewModel(view) is null)
            PrismViewModelLocator.SetAutoWireViewModel(view, true);
    }

    protected override bool IsNavigationTarget(object content, NavigateContext context)
    {
        bool isNavigationTarget = false;
        MvvmUtils.ViewAndViewModelAction&lt;INavigationAware&gt;(content, ina =&gt; { isNavigationTarget = ina.IsNavigationTarget(context.AsPrism()); });
        return isNavigationTarget;
    }

    protected override void CanNavigate(object currentContent, object content, NavigateContext context, Action&lt;bool&gt; continuationCallback)
    {
        if (currentContent is IConfirmNavigationRequest)
            ((IConfirmNavigationRequest)currentContent).ConfirmNavigationRequest(context.AsPrism(), continuationCallback);
        else if (currentContent is FrameworkElement element &amp;&amp; element.DataContext is IConfirmNavigationRequest)
            ((IConfirmNavigationRequest)element.DataContext).ConfirmNavigationRequest(context.AsPrism(), continuationCallback);
        else
            continuationCallback(true);
    }

    protected override bool PersistInJournal(object content)
    {
        bool persist = true;
        MvvmHelpers.ViewAndViewModelAction&lt;IJournalAware&gt;(content, ija =&gt; { persist &amp;= ija.PersistInHistory(); });
        return persist;
    }

    protected override void SetActive(object content, bool isActive)
    {
        MvvmUtils.ViewAndViewModelAction&lt;IActiveAware&gt;(content, iaa =&gt; iaa.IsActive = isActive);
    }

    protected override void OnNavigatedFrom(object content, NavigateContext context)
    {
        MvvmUtils.ViewAndViewModelAction&lt;INavigationAware&gt;(content, x =&gt; x.OnNavigatedFrom(context.AsPrism()));
    }

    protected override void OnNavigatedTo(object content, NavigateContext context)
    {
        MvvmUtils.ViewAndViewModelAction&lt;INavigationAware&gt;(content, ina =&gt; ina.OnNavigatedTo(context.AsPrism()));
    }

    #endregion
}

public class PrismNavigateContext : NavigateContext
{
    public PrismNavigateContext(Uri uri, INavigateParameters parameters, NavigateMode mode) : base(uri, parameters, mode)
    {
        NavigationContext = CreatePrismNavigationContext();
    }

    private NavigationContext CreatePrismNavigationContext()
    {
        var parameters = Parameters.ToPrism();
        var navigationContext = new MvvmLibNavigationContext(this, Uri, parameters);
        return navigationContext;
    }

    public NavigationContext NavigationContext { get; }
}

public static class NavigateContextExtensions
{
    public static NavigationContext AsPrism(this NavigateContext navigateContext)
    {
        if (navigateContext is PrismNavigateContext prismNavigateContext)
            return prismNavigateContext.NavigationContext;
        return null;
    }
}

public static class INavigateParametersExtensions
{
    public static NavigationParameters ToPrism(this INavigateParameters parameters)
    {
        var navigationParameters = new NavigationParameters();
        foreach (var parameter in parameters)
            navigationParameters.Add(parameter.Key, parameter.Value);
        return navigationParameters;
    }
}

public class MvvmLibNavigationContext : NavigationContext
{
    public MvvmLibNavigationContext(NavigateContext context, Uri uri, NavigationParameters navigationParameters)
        : base(null, uri, navigationParameters)
    {
        Context = context;
        GetNavigationParameters(navigationParameters);
    }

    public INavigationService MvvmLibNavigationService =&gt; Context.NavigationService;
    public NavigateContext Context { get; }

    private void GetNavigationParameters(NavigationParameters navigationParameters)
    {
        if (navigationParameters != null)
        {
            foreach (KeyValuePair&lt;string, object&gt; navigationParameter in navigationParameters)
            {
                Parameters.Add(navigationParameter.Key, navigationParameter.Value);
            }
        }
    }
}

public static class NavigationContextExtensions
{
    public static T As&lt;T&gt;(this NavigationContext navigationContext) where T: NavigationContext
    {
        if (navigationContext is T objAsT)
            return objAsT;
        return default;
    }
}
</code></pre>

<h2 id="create-a-custom-navigation-service">Create a custom Navigation Service<a class="headerlink" href="#create-a-custom-navigation-service" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Example with NavigationBehaviors and binding for Selectors (ListBox mutliple, TabControl, etc.)</p>
<pre><code class="cs">public class CustomNavigationService : NavigationService, ICustomNavigationService
{
    private INavigationJournal _journal;
    private List&lt;INavigationBehavior&gt; _behaviors;

    public CustomNavigationService()
    {
        Views = new ObservableCollection&lt;object&gt;();
        ActiveViews = new ObservableCollection&lt;object&gt;();
        _behaviors = new List&lt;INavigationBehavior&gt;();
        _journal = new CustomJournal();
    }

    public ObservableCollection&lt;object&gt; Views { get; }
    public ObservableCollection&lt;object&gt; ActiveViews { get; }

    public override INavigationJournal Journal =&gt; _journal;

    public IEnumerable&lt;INavigationBehavior&gt; Behaviors =&gt; _behaviors;

    protected override void Activate(object content)
    {
        // single and multiple
        if (Views.IndexOf(content) == -1)
            Views.Insert(Journal.CurrentEntryIndex, content);

        // multiple
        if (ActiveViews.IndexOf(content) == -1)
            ActiveViews.Insert(Journal.CurrentEntryIndex, content);

        base.Activate(content);
    }

    public virtual void Attach(INavigationBehavior behavior)
    {
        if (behavior is null)
            throw new ArgumentNullException(nameof(behavior));

        behavior.NavigationService = this;
        behavior.Attach();
        _behaviors.Add(behavior);
    }

    public void Remove(object content)
    {
        base.Remove(content, r =&gt;
        {
            // multiple
            ActiveViews.Remove(content);

            // single
            Views.Remove(content);
        });
    }

    public override void Clear()
    {
        Views.Clear();
        ActiveViews.Clear();
        base.Clear();
    }
}

public class SyncStackPanelBehavior : NavigationBehavior&lt;StackPanel&gt;
{
    protected CustomNavigationService CustomNavigationService =&gt; NavigationService as CustomNavigationService;

    protected override void OnAttach()
    {

        CustomNavigationService.Views.CollectionChanged += (s, e) =&gt;
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    {
                        foreach (var item in e.NewItems)
                        {
                            if (item is FrameworkElement element)
                            {
                                if (TargetElement.Children.IndexOf(element) == -1)
                                    TargetElement.Children.Add(EnsureNewView(element));
                            }
                        }
                    }
                    break;
            }
        };

    }

    protected virtual FrameworkElement EnsureNewView(object content)
    {
        if (content is FrameworkElement)
        {
            var newContent = ContainerLocator.Current.Resolve(content.GetType()) as FrameworkElement;
            // if no AutoWireViewModel attached property on view or dataContext not defined at construction
            MvvmUtils.TryAutoWireViewModel(newContent);
            return newContent;
        }
        return null;
    }

    protected override void OnDetach()
    { }
}

// Example: custom navigation journal: insert each entry at beginning
public class CustomJournal : NavigationJournal
{
    protected override int GetNewEntryPosition() =&gt; 0;

    protected override void RemoveEntries(int startIndex)
    {
        while (EntriesInternal.Count &lt; startIndex)
            EntriesInternal.RemoveAt(startIndex);
    }
}
</code></pre>

<p>Binding: Example ListBox Multiple</p>
<pre><code class="xml">&lt;ListBox ItemsSource=&quot;{Binding NavigationService.Views}&quot;
            SelectionMode=&quot;Multiple&quot;
            SelectedItem=&quot;{Binding NavigationService.Content}&quot;
            Grid.Row=&quot;1&quot;&gt;
    &lt;ml:Interaction.Behaviors&gt;
        &lt;ml:SelectorSelectedItemsSyncBehavior ActiveItems=&quot;{Binding NavigationService.ActiveViews}&quot; /&gt;
    &lt;/ml:Interaction.Behaviors&gt;
&lt;/ListBox&gt;
</code></pre>

<p>Inject the navigation service in MainWindow to add the behavior</p>
<pre><code class="cs">public partial class MainWindow : Window
{
    public MainWindow(ICustomNavigationService navigationService)
    {
        InitializeComponent();

        navigationService.Attach(new SyncStackPanelBehavior { AssociatedObject = Panel });
    }
}
</code></pre>

<h2 id="multiple-navigation-services">Multiple Navigation Services<a class="headerlink" href="#multiple-navigation-services" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Suggestion: Create a class with all Navigation services used</p>
<pre><code class="cs">public interface IApplicationNavigationServices
{
    INavigationService Child { get; }
    INavigationService Main { get; }
}

public class ApplicationNavigationServices : IApplicationNavigationServices
{
    private INavigationService _main;
    public INavigationService Main
    {
        get
        {
            if (_main == null)
                _main = new NavigationService();
            return _main;
        }
    }

    private INavigationService _child;
    public INavigationService Child
    {
        get
        {
            if (_child == null)
                _child = new NavigationService();
            return _child;
        }
    }

    // etc.
}
</code></pre>

<p>... register with the container</p>
<pre><code class="cs">Container.RegisterSingleton&lt;IApplicationNavigationServices,ApplicationNavigationServices&gt;();
</code></pre>

<p>... inject the ApplicationNavigationServices in ViewModels</p>
<h2 id="showing-multiple-shells">Showing multiple shells<a class="headerlink" href="#showing-multiple-shells" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Create a ShellService and an interface ISupportNavigationService to set the NavigationService used by the ShellViewModel</p>
<pre><code class="cs">public interface ISupportNavigationService
{
    INavigationService NavigationService { get; set; }
}

public interface IShellService
{
    void ShowShell();
}

public class ShellService : IShellService
{
    public virtual void ShowShell()
    {
        var shell = CreateShell();

        TryAutoWireViewModel(shell);
        TrySetNavigationService(shell);

        ShowShell(shell);
    }

    protected virtual Window CreateShell() =&gt; ContainerLocator.Current.Resolve&lt;Shell&gt;();

    protected virtual void TryAutoWireViewModel(FrameworkElement element) =&gt; MvvmUtils.TryAutoWireViewModel(element);

    protected virtual void TrySetNavigationService(object content)
        =&gt; MvvmUtils.ViewAndViewModelAction&lt;ISupportNavigationService&gt;(content, isns =&gt; isns.NavigationService = CreateScopedNavigationService());

    // for multiple navigation services: provide a new instance of a class with all navigation services
    protected virtual INavigationService CreateScopedNavigationService() =&gt; new NavigationService();

    protected virtual void ShowShell(Window shell) =&gt; shell.Show();
}
</code></pre>

<p>ShellViewModel sample</p>
<pre><code class="cs">public class ShellViewModel : ISupportNavigationService, ISupportLoaded
{
    public ShellViewModel(IShellService shellService)
    {
        _shellService = shellService;
        Commands = new NavigationServiceCommands();
    }

    public INavigationService NavigationService { get; set; }
    public NavigationServiceCommands Commands { get; }

    private DelegateCommand _showShellCommand;
    private readonly IShellService _shellService;

    public DelegateCommand ShowShellCommand =&gt;
        _showShellCommand ?? (_showShellCommand = new DelegateCommand(ExecuteShowShellCommand));

    private void ExecuteShowShellCommand()
    {
        _shellService.ShowShell();
    }

    public void OnLoaded()
    {
        Commands.Initialize(NavigationService);
    }
}
</code></pre>

<h2 id="data">Data<a class="headerlink" href="#data" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<h3 id="listcollectionviewex">ListCollectionViewEx<a class="headerlink" href="#listcollectionviewex" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Is a ListCollectionView with shortcuts and usefull methods</p>
<pre><code class="cs">public class ListCollectionViewSampleViewModel
{
    public ListCollectionViewSampleViewModel()
    {
        var users = new List&lt;User&gt;
        {
            new User { Id = 1, FirstName = &quot;First.1&quot;, LastName =&quot;Last.1&quot;, Age = 30, Role = UserRole.Admin },
            new User { Id = 2, FirstName = &quot;First.2&quot;, LastName =&quot;Last.2&quot;, Age = 40, Role = UserRole.User },
            new User { Id = 3, FirstName = &quot;First.3&quot;, LastName =&quot;Last.3&quot;, Age = 50, Role = UserRole.SuperAdmin },
            // ...
        };
        View = new ListCollectionViewEx&lt;User&gt;(users);

        Commands = new ListCollectionViewCommands(View)
        {
            Delete = Delete,
            Save = Save,
            Sort = new Action&lt;string, ListSortDirection&gt;((p, d) =&gt; View.Sort(p, d)),
            Filter = Filter
        };
    }

    public ListCollectionViewEx&lt;User&gt; View { get; }
    public ListCollectionViewCommands Commands { get; }

    private void Filter(string args)
    {
        if (string.IsNullOrWhiteSpace(args))
            View.ClearFilter();
        else
        {
            var splits = SplitText(args);
            if (splits.Length &gt; 0)
            {
                var compositeFilter = new CompositeFilter&lt;User&gt;(LogicalOperator.Or);
                foreach (var split in splits)
                {
                    compositeFilter.AddFilter(new PropertyFilter&lt;User&gt;(&quot;FirstName&quot;, PredicateOperator.Contains, split));
                    compositeFilter.AddFilter(new PropertyFilter&lt;User&gt;(&quot;LastName&quot;, PredicateOperator.Contains, split));
                }
                View.Filter = compositeFilter.Filter;
            }
        }
    }

    private string[] SplitText(string text) =&gt; text.Split(' ', ',');

    private void Save()
    {
        try
        {
            if (View.IsAddingNew)
            {
                var current = View.CurrentAddItem as User;
                current.ValidateAll();
                if (!current.HasErrors)
                {
                    // save to db...
                    View.CommitNew();
                }
            }
            else if (View.IsEditingItem)
            {
                var current = View.CurrentEditItem as User;
                current.ValidateAll();
                if (!current.HasErrors)
                {
                    // save to db ..
                    View.CommitEdit();
                }
            }
        }
        catch (Exception ex)
        { }
    }

    private void Delete()
    {
        var current = View.Current;
        if (MessageBox.Show($&quot;Delete {current.FirstName}?&quot;, &quot;Confirmation&quot;, MessageBoxButton.OKCancel) == MessageBoxResult.OK)
        {
            try
            {
                // remove from db ...
                View.Remove(current);
                // eventAggregator.GetEvent&lt;NotificationMessageEvent&gt;().Publish($&quot;{name} removed!&quot;);
            }
            catch (Exception ex)
            {
                MessageBox.Show($&quot;A problem occured:{ex.Message}&quot;);
            }
        }
    }
}

public class User : Validatable, IEditableObject
{
    private User oldUser = null;

    public void BeginEdit()
    {
        oldUser = new User
        {
            Id = Id,
            FirstName = FirstName,
            LastName = LastName,
            ImagePath = ImagePath,
            Age = Age,
            Role = Role
        };
    }

    public void CancelEdit()
    {
        if (oldUser == null)
            throw new InvalidOperationException();

        FirstName = oldUser.FirstName;
        LastName = oldUser.LastName;
        ImagePath = oldUser.ImagePath;
        Age = oldUser.age;
        Role = oldUser.role;
    }

    public void EndEdit()
    {
        oldUser = null;
    }

    private string firstName;
    [Required]
    public string FirstName
    {
        get { return firstName; }
        set { SetProperty(ref firstName, value); }
    }

    // etc.
}
</code></pre>

<h3 id="pagedlist-ienumerable-t-extension-method">PagedList (IEnumerable T extension method)<a class="headerlink" href="#pagedlist-ienumerable-t-extension-method" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<pre><code class="cs">int pageNumber = 1;
int pageSize = 50;
var pagedList = Users.ToPagedList&lt;User&gt;(pageNumber, pageSize);
</code></pre>

<p>Binding</p>
<pre><code class="xml">&lt;ListBox ItemsSource=&quot;{Binding PagedList}&quot;&gt;&lt;/ListBox&gt;
</code></pre>

<h3 id="pagedsource">PagedSource<a class="headerlink" href="#pagedsource" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<pre><code class="cs">public class PagedSourceViewModel : BindableBase
{
    public PagedSourceViewModel()
    {
        Users = new ObservableCollection&lt;User&gt;();
        PopulateUsers();
        PagedSource = new PagedSource(Users);
        Commands = new PagedSourceCommands(PagedSource);

        AddNewItemCommand = new DelegateCommand(AddItem);
    }

    public ObservableCollection&lt;User&gt; Users { get; }
    public PagedSource PagedSource { get; }
    public PagedSourceCommands Commands { get; }
    public ICommand AddNewItemCommand { get; }

    private void AddItem()
    {
        var user = new User();
        PagedSource.View.AddNewItem(user);
        PagedSource.MoveToLastPage();
        PagedSource.PageView.MoveCurrentToLast();
    }

    // etc.
}
</code></pre>

<p>Binding</p>
<pre><code class="xml">&lt;!-- commands --&gt;
&lt;Button Command=&quot;{Binding Commands.MoveCurrentToFirstCommand}&quot; &gt;
    &lt;controls:MaterialDesignIcon Icon=&quot;SkipPrevious&quot; Brush=&quot;#2980b9&quot;/&gt;
&lt;/Button&gt;

&lt;!-- currentItem --&gt;
&lt;ContentControl Content=&quot;{Binding PagedSource.PageView.CurrentItem, Mode=OneWay}&quot;&gt;&lt;/ContentControl&gt;
</code></pre>

<p>It's possible to create a <code>DataPager</code> and the methods of the PagedSource</p>
<ul>
<li>MoveToFirstPage</li>
<li>MoveToPreviousPage</li>
<li>MoveToNextPage</li>
<li>MoveToLastPage</li>
<li>MoveToPage</li>
</ul>
<h2 id="controls">Controls<a class="headerlink" href="#controls" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<h3 id="animatingcontentcontrol">AnimatingContentControl<a class="headerlink" href="#animatingcontentcontrol" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<blockquote>
<p>Content Control that allows to animate on content change.</p>
</blockquote>
<p>2 Storyboards :</p>
<ul>
<li>EntranceAnimation</li>
<li>ExitAnimation</li>
<li>Simultaneous (boolean) allows to play simultaneously the animations.</li>
<li>CanAnimateOnLoad: allows to cancel animation on load</li>
</ul>
<pre><code class="xml">&lt;ml:AnimatingContentControl ml:NavigationManager.SourceName=&quot;Main&quot;&gt;
    &lt;ml:AnimatingContentControl.EntranceAnimation&gt;
        &lt;Storyboard&gt;
            &lt;!-- Target &quot;CurrentContentPresenter&quot;  --&gt;
            &lt;DoubleAnimation Storyboard.TargetName=&quot;CurrentContentPresenter&quot;
                             Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)&quot;
                             From=&quot;400&quot; To=&quot;0&quot; Duration=&quot;0:0:0.4&quot;  /&gt;
        &lt;/Storyboard&gt;
    &lt;/ml:AnimatingContentControl.EntranceAnimation&gt;
    &lt;ml:AnimatingContentControl.ExitAnimation&gt;
        &lt;Storyboard&gt;
            &lt;!-- Target &quot;CurrentContentPresenter&quot; or with Simultaneous &quot;PreviousContentPresenter&quot; --&gt;
            &lt;DoubleAnimation Storyboard.TargetName=&quot;CurrentContentPresenter&quot;
                             Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)&quot;
                             From=&quot;0&quot; To=&quot;400&quot; Duration=&quot;0:0:0.4&quot;  /&gt;
        &lt;/Storyboard&gt;
    &lt;/ml:AnimatingContentControl.ExitAnimation&gt;
&lt;/ml:AnimatingContentControl&gt;
</code></pre>

<p>Or Simultaneous</p>
<pre><code class="xml">  &lt;ml:AnimatingContentControl Content=&quot;{Binding Navigation.Current}&quot;
                                    Simultaneous=&quot;True&quot;
                                    IsCancelled=&quot;{Binding IsCancelled}&quot;&gt;
    &lt;ml:AnimatingContentControl.EntranceAnimation&gt;
        &lt;Storyboard&gt;
            &lt;DoubleAnimation  Storyboard.TargetName=&quot;CurrentContentPresenter&quot;
                                Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)&quot;
                                From=&quot;{Binding ElementName=ThisControl,Path=ActualWidth,FallbackValue=400}&quot; To=&quot;0&quot;
                                Duration=&quot;{Binding ElementName=DuractionComboBox,Path=SelectedItem}&quot;&gt;
                &lt;DoubleAnimation.EasingFunction&gt;
                    &lt;SineEase EasingMode=&quot;EaseInOut&quot; /&gt;
                &lt;/DoubleAnimation.EasingFunction&gt;
            &lt;/DoubleAnimation&gt;
        &lt;/Storyboard&gt;
    &lt;/ml:AnimatingContentControl.EntranceAnimation&gt;
    &lt;ml:AnimatingContentControl.ExitAnimation&gt;
        &lt;Storyboard&gt;
            &lt;DoubleAnimation  Storyboard.TargetName=&quot;PreviousContentPresenter&quot;
                                Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)&quot;
                                From=&quot;0&quot; To=&quot;{Binding ElementName=ThisControl,Path=ActualWidth,FallbackValue=400}&quot;
                                Duration=&quot;{Binding ElementName=DuractionComboBox,Path=SelectedItem}&quot;&gt;
                &lt;DoubleAnimation.EasingFunction&gt;
                    &lt;SineEase EasingMode=&quot;EaseInOut&quot; /&gt;
                &lt;/DoubleAnimation.EasingFunction&gt;
            &lt;/DoubleAnimation&gt;
        &lt;/Storyboard&gt;
    &lt;/ml:AnimatingContentControl.ExitAnimation&gt;
&lt;/ml:AnimatingContentControl&gt;
</code></pre>

<p>Other sample: animations in resources</p>
<pre><code class="xml">&lt;UserControl.Resources&gt;
    &lt;Storyboard x:Key=&quot;EntranceAnimation1&quot;&gt;
        &lt;DoubleAnimation Storyboard.TargetName=&quot;CurrentContentPresenter&quot;
                         Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)&quot;
                         From=&quot;400&quot; To=&quot;0&quot; Duration=&quot;0:0:0.4&quot;  /&gt;
    &lt;/Storyboard&gt;

    &lt;Storyboard x:Key=&quot;ExitAnimation1&quot;&gt;
        &lt;DoubleAnimation Storyboard.TargetName=&quot;CurrentContentPresenter&quot;
                         Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)&quot;
                         From=&quot;0&quot; To=&quot;-400&quot; Duration=&quot;0:0:0.4&quot;  /&gt;
    &lt;/Storyboard&gt;
&lt;/UserControl.Resources&gt;
</code></pre>

<pre><code class="xml">&lt;ml:AnimatingContentControl Content=&quot;{Binding Navigation.Current}&quot;
                                 EntranceAnimation=&quot;{StaticResource EntranceAnimation1}&quot;
                                 ExitAnimation=&quot;{StaticResource ExitAnimation1}&quot;&gt;
&lt;/ml:AnimatingContentControl&gt;
</code></pre>

<p>Other sample: Change Animations dynamically and controlling when the animation is played with &quot;CanAnimate&quot;. For a Schedule view for example.</p>
<pre><code class="xml">&lt;ml:AnimatingContentControl  Content=&quot;{Binding Navigation.Current}&quot;
                                  CanAnimate=&quot;{Binding CanAnimate, Mode=OneWay}&quot;
                                  CanAnimateOnLoad=&quot;False&quot;
                                  EntranceAnimation=&quot;{Binding EntranceAnimation, Mode=OneWay}&quot;
                                  ExitAnimation=&quot;{Binding ExitAnimation, Mode=OneWay}&quot;&gt;

    &lt;ml:Interaction.Triggers&gt;
        &lt;ml:EventTrigger EventName=&quot;AnimationCompleted&quot;&gt;
            &lt;ml:CallMethodAction TargetObject=&quot;{Binding}&quot; MethodName=&quot;CompleteChangingScheduleMode&quot;/&gt;
        &lt;/ml:EventTrigger&gt;
    &lt;/ml:Interaction.Triggers&gt;

&lt;/ml:AnimatingContentControl&gt;
</code></pre>

<h3 id="transitioningcontentcontrol">TransitioningContentControl<a class="headerlink" href="#transitioningcontentcontrol" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<blockquote>
<p>Allows to play a transition on loaded.</p>
</blockquote>
<p>2 Storyboards:</p>
<ul>
<li>EntranceTransition: played when control loaded (or explicitly with &quot;DoEnter&quot;)</li>
<li>ExitTransition: played explicitly with &quot;DoLeave&quot; or IsLeaving dependency property (for example played when the user click on a tab close button)</li>
</ul>
<p>Other methods:</p>
<ul>
<li>CancelTransition</li>
<li>Reset: reset the render transform property and opacity + cancel transition</li>
</ul>
<pre><code class="xml">&lt;ml:TransitioningContentControl x:Name=&quot;TransitioningContentControl1&quot; Margin=&quot;0,20&quot;&gt;
        &lt;ml:TransitioningContentControl.EntranceTransition&gt;
            &lt;Storyboard&gt;
                &lt;DoubleAnimation Storyboard.TargetName=&quot;ContentPresenter&quot;
                                    Storyboard.TargetProperty=&quot;(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)&quot;
                                    From=&quot;0&quot; To=&quot;1&quot; Duration=&quot;0:0:0.6&quot;&gt;
                    &lt;DoubleAnimation.EasingFunction&gt;
                        &lt;ExponentialEase EasingMode=&quot;EaseInOut&quot;/&gt;
                    &lt;/DoubleAnimation.EasingFunction&gt;
                &lt;/DoubleAnimation&gt;
            &lt;/Storyboard&gt;
        &lt;/ml:TransitioningContentControl.EntranceTransition&gt;
        &lt;ml:TransitioningContentControl.ExitTransition&gt;
            &lt;Storyboard&gt;
                &lt;DoubleAnimation Storyboard.TargetName=&quot;ContentPresenter&quot;
                                    Storyboard.TargetProperty=&quot;(UIElement.Opacity)&quot;
                                    From=&quot;1&quot; To=&quot;0&quot; Duration=&quot;0:0:2&quot;/&gt;
            &lt;/Storyboard&gt;
&lt;/ml:TransitioningContentControl.ExitTransition&gt;
</code></pre>

<h3 id="transitioningitemscontrol">TransitioningItemsControl<a class="headerlink" href="#transitioningitemscontrol" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<blockquote>
<p>ItemsControl that allows to animate on item insertion and deletion.</p>
</blockquote>
<p>The &quot;ControlledAnimation&quot; avoid to set the target and the target property of the storyboard. The TargetPropertyType is a shortcut. But it's possible to target explicitly the target property of the storyboard with &quot;TargetProperty&quot; dependency property.</p>
<pre><code class="xml">&lt;ml:TransitioningItemsControl ItemsSource=&quot;{Binding MyItems}&quot;
                                   TransitionClearHandling=&quot;Transition&quot;
                                   IsCancelled=&quot;{Binding IsCancelled}&quot;&gt;
    &lt;ml:TransitioningItemsControl.EntranceAnimation&gt;
        &lt;ml:ParallelAnimation&gt;

            &lt;ml:ControlledAnimation TargetPropertyType=&quot;TranslateX&quot;&gt;
                &lt;DoubleAnimation From=&quot;200&quot; To=&quot;0&quot;  Duration=&quot;0:0:2&quot;/&gt;
            &lt;/ml:ControlledAnimation&gt;

        &lt;/ml:ParallelAnimation&gt;
    &lt;/ml:TransitioningItemsControl.EntranceAnimation&gt;

    &lt;ml:TransitioningItemsControl.ExitAnimation&gt;
        &lt;ml:ParallelAnimation&gt;
            &lt;ml:ControlledAnimation TargetPropertyType=&quot;TranslateX&quot;&gt;
                &lt;DoubleAnimation From=&quot;0&quot; To=&quot;200&quot; Duration=&quot;0:0:2&quot;/&gt;
            &lt;/ml:ControlledAnimation&gt;
        &lt;/ml:ParallelAnimation&gt;
    &lt;/ml:TransitioningItemsControl.ExitAnimation&gt;
&lt;/ml:TransitioningItemsControl&gt;
</code></pre>

<h3 id="navigatablecontentcontrol">NavigatableContentControl<a class="headerlink" href="#navigatablecontentcontrol" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>It's a control that allows to use navigation service méthods (like a Frame).</p>
<p>Example with mahApps.Metro, sets the content of the <a href="https://mahapps.com/docs/controls/HamburgerMenu" target="_blank">HamburgerMenu</a></p>
<pre><code class="cs">public partial class Shell
{
    public Shell(IConfigurableNavigationService navigationService)
    {
        InitializeComponent();

        var navigatableContentControl = new NavigatableContentControl();
        navigatableContentControl.NavigationService = navigationService;
        HamburgerMenuControl.Content = navigatableContentControl;
    }
}
</code></pre>

<p>Example 2 xaml</p>
<pre><code class="xml">&lt;!-- xmlns:ml=&quot;http://mvvmlib.com/&quot; --&gt;
&lt;ml:NavigatableContentControl x:Name=&quot;NavigatableContentControl&quot;/&gt;
</code></pre>

<h2 id="interactivity">Interactivity<a class="headerlink" href="#interactivity" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<blockquote>
<p>Uses <a href="https://github.com/Microsoft/XamlBehaviorsWpf" target="_blank">Microsoft.Xaml.Behaviors.Wpf</a></p>
</blockquote>
<p>Namespaces:</p>
<pre><code class="xml">xmlns:i=&quot;http://schemas.microsoft.com/xaml/behaviors&quot;
xmlns:ml=&quot;http://mvvmlib.com/&quot;
</code></pre>

<h3 id="callmethodaction-with-parameter">CallMethodAction with parameter<a class="headerlink" href="#callmethodaction-with-parameter" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<pre><code class="xml">&lt;Button Content=&quot;CallMethodAction Sample&quot;&gt;
    &lt;i:Interaction.Triggers&gt;
        &lt;i:EventTrigger EventName=&quot;Click&quot;&gt;
            &lt;ml:CallMethodAction TargetObject=&quot;{Binding}&quot; MethodName=&quot;MyMethod&quot; Parameter=&quot;MvvmLib!&quot;/&gt;
        &lt;/i:EventTrigger&gt;
    &lt;/i:Interaction.Triggers&gt;
&lt;/Button&gt;
</code></pre>

<h3 id="create-a-custom-triggeraction">Create a custom TriggerAction<a class="headerlink" href="#create-a-custom-triggeraction" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>Example: for closing TabItem</p>
<pre><code class="cs">public class CloseTabAction : TriggerAction&lt;Button&gt;
{
    protected override void Invoke(object parameter)
    {
        var args = parameter as RoutedEventArgs;
        if (args == null)
            return;

        var tabItem = XamlTreeHelper.FindParent&lt;TabItem&gt;((DependencyObject)args.OriginalSource);
        if (tabItem == null)
            return;

        var tabControl = XamlTreeHelper.FindParent&lt;TabControl&gt;(tabItem);
        if (tabControl == null)
            return;

        ((MainWindowViewModel)tabControl.DataContext).NavigationService.Remove(tabItem.Content);
    }
}

public class XamlTreeHelper
{
    public static T FindParent&lt;T&gt;(DependencyObject child) where T : DependencyObject
    {
        DependencyObject parentObject = VisualTreeHelper.GetParent(child);

        if (parentObject == null)
            return null;

        var parent = parentObject as T;
        if (parent != null)
            return parent;

        return FindParent&lt;T&gt;(parentObject);
    }
}
</code></pre>

<p>Add the trigger to the TabItem implicit Style</p>
<pre><code class="xml">&lt;Style TargetType=&quot;TabItem&quot;&gt;
    &lt;Setter Property=&quot;Header&quot; Value=&quot;{Binding DataContext.Name}&quot;/&gt;
    &lt;Setter Property=&quot;HeaderTemplate&quot;&gt;
        &lt;Setter.Value&gt;
            &lt;DataTemplate&gt;
                &lt;Grid&gt;
                    &lt;Grid.ColumnDefinitions&gt;
                        &lt;ColumnDefinition /&gt;
                        &lt;ColumnDefinition /&gt;
                    &lt;/Grid.ColumnDefinitions&gt;
                    &lt;ContentControl Content=&quot;{Binding}&quot; VerticalAlignment=&quot;Center&quot; HorizontalAlignment=&quot;Center&quot; Margin=&quot;0,0,7,0&quot; /&gt;
                    &lt;Button Content=&quot;X&quot;
                            HorizontalAlignment=&quot;Right&quot; Height=&quot;20&quot; Width=&quot;20&quot; Padding=&quot;0&quot;
                            Grid.Column=&quot;1&quot;&gt;
                        &lt;ml:Interaction.Triggers&gt;
                            &lt;ml:EventTrigger EventName=&quot;Click&quot;&gt;
                                &lt;local:CloseTabAction /&gt;
                            &lt;/ml:EventTrigger&gt;
                        &lt;/ml:Interaction.Triggers&gt;
                    &lt;/Button&gt;
                &lt;/Grid&gt;
            &lt;/DataTemplate&gt;
        &lt;/Setter.Value&gt;
    &lt;/Setter&gt;
&lt;/Style&gt;
</code></pre>

<p>And the TabControl: ItemsSource binded to the Views of a Custom NavigationService</p>
<pre><code class="xml">&lt;TabControl ItemsSource=&quot;{Binding NavigationService.Views}&quot;&gt;&lt;/TabControl&gt;
</code></pre>

<h3 id="behaviors">Behaviors<a class="headerlink" href="#behaviors" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>EventToCommandBehavior</p>
<pre><code class="xml">&lt;Button Content=&quot;EventToCommandBehavior Sample&quot;&gt;
    &lt;i:Interaction.Behaviors&gt;
        &lt;ml:EventToCommandBehavior EventName=&quot;Click&quot; Command=&quot;{Binding MessageCommand}&quot; CommandParameter=&quot;World&quot;/&gt;
    &lt;/i:Interaction.Behaviors&gt;
&lt;/Button&gt;
</code></pre>

<p>SelectorSelectedItemsSyncBehavior</p>
<pre><code class="xml">&lt;ListBox ItemsSource=&quot;{Binding Users}&quot;
            SelectionMode=&quot;Multiple&quot;
            SelectedItem=&quot;{Binding SelectedUser}&quot;&gt;
    &lt;i:Interaction.Behaviors&gt;
        &lt;ml:SelectorSelectedItemsSyncBehavior ActiveItems=&quot;{Binding SelectedUsers}&quot;/&gt;
    &lt;/i:Interaction.Behaviors&gt;
&lt;/ListBox&gt;
</code></pre>

<p>TreeViewSelectedItemChangedBehavior</p>
<pre><code class="xml"> &lt;TreeView ItemsSource=&quot;{Binding Families}&quot;&gt;
    &lt;TreeView.Resources&gt;
        &lt;HierarchicalDataTemplate DataType=&quot;{x:Type viewModels:Family}&quot; ItemsSource=&quot;{Binding Members}&quot;&gt;
            &lt;StackPanel Orientation=&quot;Horizontal&quot;&gt;
                &lt;TextBlock Text=&quot;{Binding Name}&quot; /&gt;
            &lt;/StackPanel&gt;
        &lt;/HierarchicalDataTemplate&gt;
        &lt;DataTemplate DataType=&quot;{x:Type viewModels:FamilyMember}&quot;&gt;
            &lt;StackPanel Orientation=&quot;Horizontal&quot;&gt;
                &lt;TextBlock Text=&quot;{Binding Name}&quot; /&gt;
            &lt;/StackPanel&gt;
        &lt;/DataTemplate&gt;
    &lt;/TreeView.Resources&gt;
    &lt;i:Interaction.Behaviors&gt;
        &lt;ml:TreeViewSelectedItemChangedBehavior
            ExpandSelected=&quot;True&quot;
            SelectedItem=&quot;{Binding ActiveFamilyOrMember}&quot; /&gt;
    &lt;/i:Interaction.Behaviors&gt;
&lt;/TreeView&gt;
</code></pre>

<h2 id="bindingproxy">BindingProxy<a class="headerlink" href="#bindingproxy" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Example:</p>
<pre><code class="xml">&lt;DataGrid x:Name=&quot;DataGrid1&quot; ItemsSource=&quot;{Binding CollectionView}&quot; AutoGenerateColumns=&quot;False&quot; IsReadOnly=&quot;True&quot;&gt;
    &lt;DataGrid.Resources&gt;
        &lt;!-- 1. Adds the Proxy in control or window resources--&gt;
        &lt;ml:BindingProxy x:Key=&quot;Proxy&quot;  Data=&quot;{Binding}&quot;/&gt;
    &lt;/DataGrid.Resources&gt;
    &lt;DataGrid.Columns&gt;
        &lt;DataGridTextColumn Binding=&quot;{Binding FirstName}&quot; Width=&quot;*&quot;&gt;
            &lt;DataGridTextColumn.Header&gt;
                &lt;Grid&gt;
                    &lt;Grid.ColumnDefinitions&gt;
                        &lt;ColumnDefinition/&gt;
                        &lt;ColumnDefinition Width=&quot;Auto&quot; /&gt;
                    &lt;/Grid.ColumnDefinitions&gt;

                    &lt;TextBlock Text=&quot;Name&quot; /&gt;

                    &lt;local:DropDownButton Grid.Column=&quot;1&quot;&gt;
                        &lt;local:DropDownButton.DropDownContent&gt;
                            &lt;Grid&gt;
                                &lt;Grid.RowDefinitions&gt;
                                    &lt;RowDefinition /&gt;
                                    &lt;RowDefinition Height=&quot;Auto&quot;/&gt;
                                &lt;/Grid.RowDefinitions&gt;

                                &lt;!-- code --&gt;

                                &lt;StackPanel Orientation=&quot;Horizontal&quot; Grid.Row=&quot;1&quot;&gt;
                                    &lt;!-- 2. Use the Proxy as Source and bind with The Data dependency property --&gt;
                                    &lt;Button Content=&quot;Filter&quot; Command=&quot;{Binding Data.FilterFirstNameCommand, Source={StaticResource Proxy}}&quot; /&gt;
                                &lt;/StackPanel&gt;
                            &lt;/Grid&gt;
                        &lt;/local:DropDownButton.DropDownContent&gt;
                    &lt;/local:DropDownButton&gt;
                &lt;/Grid&gt;
            &lt;/DataGridTextColumn.Header&gt;
        &lt;/DataGridTextColumn&gt;

        &lt;!-- other columns --&gt;
    &lt;/DataGrid.Columns&gt;
&lt;/DataGrid&gt;
</code></pre>


                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">
MvvmLib Documentation - &copy; 2019. <a href='https://github.com/romagny13/MvvmLib' target='_blank'>GitHub</a> | <a href='https://www.nuget.org/profiles/romagny13' target='_blank'>NuGet</a>.
                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="js/jquery-2.1.1.min.js"></script>
    <script src="js/modernizr-2.8.3.min.js"></script>
    <script src="js/highlight.pack.js"></script>
    <script src="js/theme.js"></script>

</body>
</html>
